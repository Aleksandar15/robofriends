{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","containers/App.js","serviceWorker.js","index.js"],"names":["Card","name","email","id","className","alt","src","CardList","robots","map","user","i","key","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","App","onSearchChange","event","setState","target","value","state","fetch","then","reponse","json","users","this","filteredRbots","filter","robot","toLowerCase","includes","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"2OAceA,EAZF,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,KAAMC,EAAgB,EAAhBA,MAAOC,EAAS,EAATA,GAC5B,OACC,yBAAKC,UAAU,uDACd,yBAAKC,IAAI,SAASC,IAAG,+BAA0BH,EAA1B,cACrB,6BACC,4BAAKF,GACL,2BAAIC,MCcOK,EAnBE,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OAInB,OACC,6BACCA,EAAOC,KAAI,SAACC,EAAMC,GAClB,OACA,kBAAC,EAAD,CACAC,IAAKD,EACLR,GAAIK,EAAOG,GAAGR,GACdF,KAAMO,EAAOG,GAAGV,KAChBC,MAAOM,EAAOG,GAAGT,aCALW,EAbG,SAAC,GAAkC,EAAhCC,YAAiC,IAApBC,EAAmB,EAAnBA,aACjC,OACC,yBAAKX,UAAU,OACd,2BACAA,UAAY,oCACZY,KAAO,SACPC,YAAY,gBACZC,SAAUH,MCEEI,EATA,SAACC,GAEf,OACC,yBAAKC,MAAO,CAAEC,UAAW,SAAUC,OAAQ,kBAAmBC,OAAQ,UACpEJ,EAAMK,WCwEKC,G,kBA9Db,aAAgB,IAAD,8BAEd,+CAsBFC,eAAiB,SAACC,GAEjB,EAAKC,SAAS,CAAEf,YAAac,EAAME,OAAOC,SAvBzC,EAAKC,MAAQ,CACZxB,OAAQ,GACRM,YAAa,IALA,E,iFAeK,IAAD,OACnBmB,MAAM,6CACJC,MAAK,SAAAC,GAAO,OAAGA,EAAQC,UACvBF,MAAK,SAAAG,GAAK,OAAG,EAAKR,SAAS,CAAErB,OAAQ6B,S,+BAW7B,IAAD,EACuBC,KAAKN,MAA7BxB,EADC,EACDA,OAAQM,EADP,EACOA,YACVyB,EAAgB/B,EAAOgC,QAAO,SAAAC,GACnC,OAAOA,EAAMxC,KAAKyC,cAAcC,SAAS7B,EAAY4B,kBAgBrD,OACD,yBAAKtC,UAAW,MACf,wBAAIA,UAAU,MAAd,eACA,kBAAC,EAAD,CAAWW,aAAcuB,KAAKX,iBAC9B,kBAAC,EAAD,KAEA,kBAAC,EAAD,CAAUnB,OAAW+B,U,GAvDLK,cCHCC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCRNC,IAASC,OAAO,kBAAC,EAAD,MAAQC,SAASC,eAAe,SDyH1C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMtB,MAAK,SAAAuB,GACjCA,EAAaC,iB","file":"static/js/main.c8f76e34.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card = ({ name, email, id }) => {\r\n\treturn (\r\n\t\t<div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n\t\t\t<img alt='robots' src={`https://robohash.org/${id}?200x200`} />\r\n\t\t\t<div>\r\n\t\t\t\t<h2>{name}</h2>\r\n\t\t\t\t<p>{email}</p>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t\t\t);\r\n}\r\n\r\nexport default Card;\r\n","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({ robots }) => {\r\n\t// if (true) {\r\n\t// \tthrow new Error('NOOOOOO!');\r\n\t// }\r\n\treturn (\r\n\t\t<div>\r\n\t\t{robots.map((user, i) => {\r\n\t\t\treturn (\r\n\t\t\t<Card \r\n\t\t\tkey={i} \r\n\t\t\tid={robots[i].id} \r\n\t\t\tname={robots[i].name} \r\n\t\t\temail={robots[i].email}/>\r\n\t\t\t);\r\n\t})}\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox = ({ searchfield, searchChange }) => {\r\n\treturn (\r\n\t\t<div className='pa2'>\r\n\t\t\t<input \r\n\t\t\tclassName = 'pa3 ba b-- green bg-lightest-blue'\r\n\t\t\ttype = 'search' \r\n\t\t\tplaceholder='search robots' \r\n\t\t\tonChange={searchChange}\r\n\t\t\t/>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n\t// console.log(props);\r\n\treturn (\r\n\t\t<div style={{ overflowY: 'scroll', border: '5px solid black', height: '500px'}}>\r\n\t\t\t{props.children}\r\n\t\t</div>\r\n\t\t);\r\n};\r\n\r\nexport default Scroll;","// import React from 'react'; in 12.10.5edited\r\nimport React, { Component } from 'react';\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/SearchBox';\r\n// import { robots } from './robots';  removed 14.10.0\r\nimport Scroll from '../components/Scroll';\r\n// import ErrorBoundry from '../components/ErrorBoundry';\r\nimport './App.css';\r\n\r\n// const state = {\r\n// \trobots: robots,\r\n// \tsearchfield: ''\r\n// }       12.12.12\r\n\r\n// const App = () => { in 12.10.4removed\r\n\tclass App extends Component {\r\n\t\tconstructor () {\r\n\t\t\t// here we can DECLARE the state  -- and can change\r\n\t\t\tsuper()\r\n\t\t\tthis.state = {\r\n\t\t\t\trobots: [],\r\n\t\t\t\tsearchfield: ''\r\n\t\t\t}\r\n\t\t\t// console.log('1/constructor');   for testing 14.9.0\r\n\t\t}\r\n\t\t// \t\t\t<CardList robots = { robots }/> in 12. 13.2 changes\r\n\t\t// bcuz robots  =>  this.state.robots  //which is REACT component\r\n\t// aa and this.state.ROBOTS our state(robots) is passed down as PROPS\r\n\t// as PROPS inside CardList, even tho in APP.js is a state\r\n\r\n\t// this will be after 14.6.3\r\n\tcomponentDidMount() {\r\n\t\tfetch('http://jsonplaceholder.typicode.com/users')\r\n\t\t\t.then(reponse=>\treponse.json())\r\n\t\t\t.then(users =>this.setState({ robots: users }));\r\n\t\t// console.log('check');  14.8\r\n\t\t// this.setState({ robots: robots });   14.11.11 bastard removed\r\n\t\t\t// console.log('2/componentDidMount'); for testing 14.9.0\r\n\t}\r\n\r\n\tonSearchChange = (event) => {\r\n\t\t// here we paste the API i guess  14.10.1\r\n\t\tthis.setState({ searchfield: event.target.value })\r\n\t\t// console.log(event.target.value); 12.22.22 he removed this\r\n\t}\r\n\t\trender() {\r\n\t\tconst { robots, searchfield } = this.state;\r\n\t\tconst filteredRbots = robots.filter(robot =>{\r\n\t\t\treturn robot.name.toLowerCase().includes(searchfield.toLowerCase());\r\n\t\t\t})\r\n\t\t\t\t// console.log('3/render');        for testing 14.9.0\r\n\t\t\t// if (this.state.robots.length === 0) {\r\n// 16. 5.5 shortening the code, by const,\r\n// \tI can shorten up this.state in If(robots.length)\r\n \t// Ooh I am so smart, I already cut of   If(robots.length) = 0\r\n \t\t// so the only modification is IF(!robots.length) =/ 0\r\n\t\t\t// \treturn <h1>Loading</h1>\r\n\t\t\t// }\telse { }  - inside is the return() bellow/ 14.14.41\r\n\t// also .then(users =>{}) - has to be EMPTY inside componentDidMount\r\n\r\n\t\t// return !robots.length ?\r\n\t\t// \t<h1>Loading</h1> : (   - smart if else statement,\r\n\t\t\t\t// 19.React 16. 7.0\r\n\r\n\t\t\treturn (\r\n\t\t<div className ='tc'>\r\n\t\t\t<h1 className='f1'>RoboFriends</h1>\r\n\t\t\t<SearchBox searchChange={this.onSearchChange}/>\r\n\t\t\t<Scroll>\r\n\r\n\t\t\t<CardList robots = { filteredRbots }/>\r\n\t\t\t\t\r\n\t\t\t</Scroll>\r\n\t\t</div>\r\n\t);\r\n\t\t}\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n// import Card from './Card'; in 11.removed\n// import CardList from './CardList'; in 12.removed\nimport App from './containers/App'\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n// import { robots } from './robots'; in 12.1m\n\nReactDOM.render(<App/>, document.getElementById('root'));\n\t\t// <CardList robots = { robots }/> 12.1m\n\t// , document.getElementById('root'));  -- samo go premestuvam\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}